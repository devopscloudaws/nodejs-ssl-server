version: 0.2

env:
  variables:
    REGIONS: "us-east-1 ap-southeast-1"

phases:
  pre_build:
    commands:
      - echo Logging into Docker Hub...
      - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - echo Logging into ECR in all target regions...
      - |
        for REGION in $REGIONS; do
          echo "Logging into ECR in $REGION..."
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin 722136401996.dkr.ecr.$REGION.amazonaws.com || exit 1
        done

  build:
    commands:
      - set -e
      - echo Building Docker image...
      - docker build -t example-nodejs .

      - echo Tagging and pushing Docker image to ECR in all regions...
      - |
        for REGION in $REGIONS; do
          IMAGE_URI="722136401996.dkr.ecr.$REGION.amazonaws.com/example-nodejs:latest"
          docker tag example-nodejs:latest $IMAGE_URI
          docker push $IMAGE_URI
        done

      - echo Deploying VPC stacks in all regions...
      - |
        for REGION in $REGIONS; do
          echo "Checking VPC stack in $REGION..."
          VPC_STATUS=$(aws cloudformation describe-stacks \
            --region $REGION \
            --stack-name vpc-stack-$REGION \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NOT_FOUND")

          if [[ "$VPC_STATUS" =~ "COMPLETE" || "$VPC_STATUS" =~ "IN_PROGRESS" ]]; then
            echo "✅ Skipping VPC stack in $REGION. Status: $VPC_STATUS"
            continue
          fi

          echo "🚀 Deploying VPC Stack in $REGION..."
          aws cloudformation deploy \
            --region $REGION \
            --stack-name vpc-stack-$REGION \
            --template-file infra/vpc_stack.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset || exit 1
        done

      - echo Deploying ALB and ECS stacks in all regions...
      - |
        for REGION in $REGIONS; do
          echo "Checking ALB stack in $REGION..."
          ALB_STATUS=$(aws cloudformation describe-stacks \
            --region $REGION \
            --stack-name alb-stack-$REGION \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NOT_FOUND")

          if [[ "$ALB_STATUS" =~ "COMPLETE" || "$ALB_STATUS" =~ "IN_PROGRESS" ]]; then
            echo "✅ Skipping ALB stack in $REGION. Status: $ALB_STATUS"
            continue
          fi

          if [[ "$REGION" == "us-east-1" ]]; then
            CERT_ARN=$CERT_ARN_US_EAST_1
          elif [[ "$REGION" == "ap-southeast-1" ]]; then
            CERT_ARN=$CERT_ARN_AP_SOUTHEAST_1
          fi

          if [[ -z "$CERT_ARN" ]]; then
            echo "❌ SSLCertificateArn is not set for $REGION. Skipping ALB stack."
            continue
          fi

          echo "🚀 Deploying ALB Stack in $REGION..."
          aws cloudformation deploy \
            --region $REGION \
            --stack-name alb-stack-$REGION \
            --template-file infra/alb_stack.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              VpcExportName=CMS3VPC \
              PublicSubnet1ExportName=CMS3PublicSubnet1 \
              PublicSubnet2ExportName=CMS3PublicSubnet2 \
              SSLCertificateArn=$CERT_ARN \
              TargetGroupExportName=CMSNodejsTargetGroup \
              ALBDNSExportName=CMS3-ALB-DNS-$REGION || exit 1

          echo "Checking ECS stack in $REGION..."
          ECS_STATUS=$(aws cloudformation describe-stacks \
            --region $REGION \
            --stack-name ecs-stack-$REGION \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NOT_FOUND")

          if [[ "$ECS_STATUS" =~ "COMPLETE" || "$ECS_STATUS" =~ "IN_PROGRESS" ]]; then
            echo "✅ Skipping ECS stack in $REGION. Status: $ECS_STATUS"
            continue
          fi

          echo "🚀 Deploying ECS Stack in $REGION..."
          aws cloudformation deploy \
            --region $REGION \
            --stack-name ecs-stack-$REGION \
            --template-file infra/ecs_stack.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              RegionName=$REGION \
              KeyName=$KEY_NAME \
              TargetGroupExportName=CMSNodejsTargetGroup || exit 1
        done

      - echo "Retrieving ALB DNS values from both regions..."
      - |
        ALB_DNS_US_EAST_1=$(aws cloudformation list-exports \
          --region us-east-1 \
          --query "Exports[?Name=='CMS3-ALB-DNS-us-east-1'].Value" \
          --output text)

        ALB_DNS_AP_SOUTHEAST_1=$(aws cloudformation list-exports \
          --region ap-southeast-1 \
          --query "Exports[?Name=='CMS3-ALB-DNS-ap-southeast-1'].Value" \
          --output text)

        echo "ALB DNS us-east-1: $ALB_DNS_US_EAST_1"
        echo "ALB DNS ap-southeast-1: $ALB_DNS_AP_SOUTHEAST_1"

      - echo Deploying CloudFront + WAF stack in us-east-1 only...
      - |
        aws cloudformation deploy \
          --region us-east-1 \
          --stack-name waf-cloudfront-stack-us-east-1 \
          --template-file infra/waf_cloudfront_stack.yml \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset \
          --parameter-overrides \
            ALBDNSUSEast1=$ALB_DNS_US_EAST_1 \
            ALBDNSAPSoutheast1=$ALB_DNS_AP_SOUTHEAST_1 || exit 1

artifacts:
  files:
    - '**/*'
